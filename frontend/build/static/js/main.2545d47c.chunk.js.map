{"version":3,"sources":["api/config.js","api/endpoints.js","Components/Lives.js","Components/Game.js","Components/GameOver.js","Components/InputBar.js","Components/Leaderboard.js","Components/Button.js","Components/NameInput.js","ColorModeSwitcher.js","Components/Avatars.js","Components/Topbar.js","Components/URLInput.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["API_ENDPOINTS","addUser","createScope","getRandomKeyword","checkAnswer","updateScore","leaderBoard","resetScope","baseURL","console","log","API","axios","create","require","printApiError","api","err","addUserReq","data","a","post","res","createScopeReq","getRandomKeywordReq","checkAnswerReq","updateScoreReq","leaderBoardReq","get","users","resetScopeReq","Lives","lives","p","spacing","as","FaHeart","w","h","color","Game","wiki","userId","handleGameOver","incrementScore","useState","keyword","setKeyword","setLives","getNewKeyword","id","useEffect","answer","included","correct","bg","direction","colorScheme","variant","onClick","GameOver","score","restartGame","InputBar","Leaderboard","isOpen","onClose","loading","setLoading","setData","length","isNumeric","map","i","name","StyledButton","text","isLoading","style","position","left","top","alignSelf","height","width","textColor","NameInput","setName","handleUsernameChange","maxWidth","value","onChange","e","target","placeholder","ColorModeSwitcher","props","toggleColorMode","useColorMode","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","marginLeft","icon","IMAGES","image","Avatars","src","Topbar","setShowLeaderBoard","justifyContent","alignItems","display","mr","justifySelf","URLInput","setWiki","handleWiki","error","App","gameStarted","setGameStarted","gameOver","setGameOver","user","setUser","showLeaderBoard","gameLoading","setGameLoading","setScore","setError","verifyNotEmpty","input","handleWikiChange","title","theme","textAlign","minH","scope","scoreToAdd","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2545d47c.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const API_ENDPOINTS = {\n  addUser: '/add-user',\n  createScope: '/create-scope',\n  getRandomKeyword: 'get-random-keyword',\n  checkAnswer: '/check-answer',\n  updateScore: '/update-score',\n  leaderBoard: '/leaderboard',\n  resetScope: '/reset-scope',\n};\n\nconst baseURL =\n  process.env.NODE_ENV === 'production'\n    ? 'https://guessipedia.herokuapp.com/'\n    : 'http://localhost:5000/';\nconsole.log(`Server URL: ${baseURL}`);\nexport const API = axios.create({\n  baseURL,\n});\n","const { API, API_ENDPOINTS } = require('./config');\n\nconst {\n  addUser,\n  createScope,\n  getRandomKeyword,\n  checkAnswer,\n  updateScore,\n  leaderBoard,\n  resetScope,\n} = API_ENDPOINTS;\n\nconst printApiError = (api, err) => console.log(`${api} error: ${err}`);\n\nexport const addUserReq = async data => {\n  try {\n    const res = await API.post(addUser, data);\n    return res.data;\n  } catch (e) {\n    printApiError(addUser, e);\n  }\n};\n\nexport const createScopeReq = async data => {\n  try {\n    const res = await API.post(createScope, data);\n    return res.data;\n  } catch (e) {\n    printApiError(createScope, e);\n  }\n};\n\nexport const getRandomKeywordReq = async data => {\n  try {\n    const res = await API.post(getRandomKeyword, data);\n    return res.data;\n  } catch (e) {\n    printApiError(checkAnswer, e);\n  }\n};\n\nexport const checkAnswerReq = async data => {\n  try {\n    const res = await API.post(checkAnswer, data);\n    return res.data;\n  } catch (e) {\n    printApiError(checkAnswer, e);\n  }\n};\n\nexport const updateScoreReq = async data => {\n  try {\n    const res = await API.post(updateScore, data);\n    return res.data;\n  } catch (e) {\n    printApiError(updateScore, e);\n  }\n};\n\nexport const leaderBoardReq = async () => {\n  try {\n    const res = await API.get(leaderBoard);\n    return res.data ?? { users: [] };\n  } catch (e) {\n    printApiError(leaderBoard, e);\n  }\n};\n\nexport const resetScopeReq = async data => {\n  try {\n    const res = await API.post(resetScope, data);\n    return res.data;\n  } catch (e) {\n    printApiError(leaderBoard, e);\n  }\n};\n","import { Icon } from '@chakra-ui/react';\nimport { Box, Center, HStack } from '@chakra-ui/layout';\nimport React from 'react';\nimport { FaHeart } from 'react-icons/fa';\n\nexport default function Lives({ lives = 3 }) {\n  return (\n    <Box p={8}>\n      <Center>\n        <HStack spacing=\"10px\">\n          <Icon\n            as={FaHeart}\n            w={6}\n            h={6}\n            color={lives >= 1 ? 'red.500' : 'gray.400'}\n          />\n          <Icon\n            as={FaHeart}\n            w={6}\n            h={6}\n            color={lives >= 2 ? 'red.500' : 'gray.400'}\n          />\n          <Icon\n            as={FaHeart}\n            w={6}\n            h={6}\n            color={lives >= 3 ? 'red.500' : 'gray.400'}\n          />\n        </HStack>\n      </Center>\n    </Box>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { Box, Center, VStack, Stack } from '@chakra-ui/layout';\nimport { Button } from '@chakra-ui/react';\nimport React from 'react';\nimport { checkAnswerReq, getRandomKeywordReq } from '../api/endpoints';\nimport Lives from './Lives';\n\nexport default function Game({\n  wiki = 'wiki',\n  userId,\n  handleGameOver,\n  incrementScore,\n}) {\n  const [keyword, setKeyword] = useState('Loading... ⌛');\n  const [lives, setLives] = useState(3);\n\n  const decrementLive = () => {\n    if (!(lives - 1)) handleGameOver();\n    else setLives(lives => lives - 1);\n  };\n\n  const getNewKeyword = async () => {\n    const data = await getRandomKeywordReq({ id: userId });\n    setKeyword(data?.keyword);\n  };\n\n  useEffect(() => {\n    getNewKeyword();\n  }, []);\n\n  const checkAnswer = async answer => {\n    const { correct } = await checkAnswerReq({\n      keyword,\n      included: answer,\n      id: userId,\n    });\n    if (correct) {\n      incrementScore();\n    } else {\n      decrementLive();\n    }\n    getNewKeyword();\n  };\n\n  return (\n    <Box p={8}>\n      <VStack spacing=\"24px\">\n        <Center>{`Does this link exist on ${wiki} wikipedia page?`}</Center>\n        <Center bg=\"tomato\" h=\"400px\" w=\"400px\" color=\"white\">\n          {keyword}\n        </Center>\n        <Center>\n          <Stack direction=\"row\" spacing={4}>\n            <Button\n              colorScheme=\"blue\"\n              variant=\"solid\"\n              onClick={() => checkAnswer(true)}\n            >\n              Yes\n            </Button>\n            <Button\n              colorScheme=\"gray\"\n              variant=\"solid\"\n              onClick={() => checkAnswer(false)}\n            >\n              No\n            </Button>\n          </Stack>\n        </Center>\n      </VStack>\n      <Center>\n        <Lives lives={lives} />\n      </Center>\n    </Box>\n  );\n}\n","import { Button } from '@chakra-ui/react';\nimport { Box, Center, VStack, Stack } from '@chakra-ui/layout';\nimport React from 'react';\n\nexport default function GameOver({ score = 0, restartGame }) {\n  return (\n    <Box p={8}>\n      <VStack spacing=\"24px\">\n        <Center>Game over!</Center>\n        <Center>You scored {score}.</Center>\n        <Center>\n          <Button colorScheme=\"yellow\" variant=\"solid\" onClick={restartGame}>\n            Play again!\n          </Button>\n        </Center>\n      </VStack>\n    </Box>\n  );\n}\n","import { Input } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction InputBar() {\n  return (\n    <div>\n      <Input\n        style={{\n          left: 0,\n          top: 0,\n          alignSelf: 'center',\n          maxWidth: '30%',\n        }}\n        variant=\"filled\"\n        placeholder=\"Simon Fraser University\"\n      />\n    </div>\n  );\n}\n\nexport default InputBar;\n","import { Box, Text } from '@chakra-ui/layout';\nimport {\n  Table,\n  TableCaption,\n  Tbody,\n  Td,\n  Tfoot,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/table';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\nimport { leaderBoardReq } from '../api/endpoints';\n\nexport default function Leaderboard({ isOpen, onClose }) {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    (async function () {\n      setLoading(true);\n      const { users } = await leaderBoardReq();\n      setData(users);\n      setLoading(false);\n    })();\n  }, [isOpen]);\n\n  const renderLeaderboard = () =>\n    data.map(({ name, score }, i) => (\n      <Tr>\n        <Td>{i + 1}</Td>\n        <Td>{name}</Td>\n        <Td isNumeric>{score}</Td>\n      </Tr>\n    ));\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalCloseButton />\n        <ModalBody>\n          <Box p={8}>\n            {loading && <Text>{'Loading ⌛'}</Text>}\n            {!loading && data.length ? (\n              <Table variant=\"striped\" colorScheme=\"teal\">\n                <TableCaption>People with the highest scores</TableCaption>\n                <Thead>\n                  <Tr>\n                    <Th>Rank #</Th>\n                    <Th>Username</Th>\n                    <Th isNumeric>Score</Th>\n                  </Tr>\n                </Thead>\n                <Tbody>{renderLeaderboard()}</Tbody>\n                <Tfoot>\n                  <Tr>\n                    <Th>Rank #</Th>\n                    <Th>Username</Th>\n                    <Th isNumeric>Score</Th>\n                  </Tr>\n                </Tfoot>\n              </Table>\n            ) : (\n              <Text>{'No gamers found 😭'}</Text>\n            )}\n          </Box>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { Button } from '@chakra-ui/react';\nimport React from 'react';\n\nfunction StyledButton({ text, onClick, isLoading }) {\n  return (\n    <div>\n      <Button\n        style={{\n          position: 'relative',\n          left: 0,\n          top: 0,\n          alignSelf: 'center',\n        }}\n        height=\"40px\"\n        width=\"120px\"\n        textColor=\"black\"\n        onClick={onClick}\n        isLoading={isLoading}\n      >\n        {text}\n      </Button>\n    </div>\n  );\n}\n\nexport default StyledButton;\n","import { React, useState, useRef } from 'react';\nimport StyledButton from './Button';\nimport { Input } from '@chakra-ui/input';\n\nexport default function NameInput({ setName, name, handleUsernameChange }) {\n  return (\n    <div>\n      <Input\n        style={{\n          left: 0,\n          top: 0,\n          alignSelf: 'center',\n          maxWidth: '30%',\n        }}\n        value={name}\n        onChange={e => setName(e.target.value)}\n        variant=\"filled\"\n        placeholder=\"Enter username\"\n      />\n      <StyledButton text=\"Enter\" onClick={handleUsernameChange} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import { Wrap, WrapItem, Avatar } from '@chakra-ui/react';\nimport React from 'react';\n\nconst IMAGES = [\n  {\n    name: 'Shaneil Kapadia ',\n    image:\n      'https://media-exp1.licdn.com/dms/image/D5635AQH6oh0dL1hTrA/profile-framedphoto-shrink_400_400/0/1621882924892?e=1638144000&v=beta&t=dEi3-1160jNZjdttAkj8BouDuePmKVxQ8LJE09rTjjk',\n  },\n  {\n    name: 'Deniz Evrendilek',\n    image:\n      'https://media-exp1.licdn.com/dms/image/C5603AQFScvaD10boTQ/profile-displayphoto-shrink_200_200/0/1570066541787?e=1643241600&v=beta&t=1eZWEay0-SQwLFrzWrBwG-LwW-ROA3skDZCx2dMTvqc',\n  },\n  {\n    name: 'Zwe Min Soe',\n    image:\n      'https://media-exp1.licdn.com/dms/image/C4E03AQHRmi0JWdvFqA/profile-displayphoto-shrink_400_400/0/1589740212421?e=1643241600&v=beta&t=NgVGFkAqBasaOWHe1ygIiYT60u_QVy_detWSWoEFxWE',\n  },\n];\n\nexport default function Avatars() {\n  const renderAvatars = () =>\n    IMAGES.map(({ name, image }) => (\n      <WrapItem>\n        <Avatar name={name} src={image} />\n      </WrapItem>\n    ));\n\n  return <Wrap w={'100%'}>{renderAvatars()}</Wrap>;\n}\n","import { Box, Button } from '@chakra-ui/react';\nimport React from 'react';\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\nimport Avatars from './Avatars';\n\nexport default function Topbar({ setShowLeaderBoard }) {\n  const handleClick = () => {\n    setShowLeaderBoard();\n  };\n\n  return (\n    <Box\n      w={'100%'}\n      h={16}\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      display=\"flex\"\n    >\n      <Avatars />\n      <Button variant=\"link\" onClick={handleClick} mr={4}>\n        {'Leaderboard 🏆'}\n      </Button>\n      <ColorModeSwitcher justifySelf=\"flex-end\" />\n    </Box>\n  );\n}\n","import React from 'react';\nimport { Center } from '@chakra-ui/layout';\nimport StyledButton from './Button';\nimport { Input } from '@chakra-ui/input';\n\nfunction URLInput({ setWiki, wiki, handleWiki, isLoading = false, error }) {\n  return (\n    <div>\n      <Center color=\"red\">{error}</Center>\n      <Input\n        style={{\n          left: 0,\n          top: 0,\n          alignSelf: 'center',\n          maxWidth: '30%',\n        }}\n        value={wiki}\n        onChange={e => setWiki(e.target.value)}\n        variant=\"filled\"\n        placeholder=\"Simon Fraser University\"\n      />\n      <StyledButton text=\"Start\" onClick={handleWiki} isLoading={isLoading} />\n    </div>\n  );\n}\n\nexport default URLInput;\n","import { Box, ChakraProvider, Grid, theme } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport Game from './Components/Game';\nimport GameOver from './Components/GameOver';\nimport InputBar from './Components/InputBar';\nimport Leaderboard from './Components/Leaderboard';\nimport NameInput from './Components/NameInput';\nimport Topbar from './Components/Topbar';\nimport URLInput from './Components/URLInput';\nimport {\n  addUserReq,\n  createScopeReq,\n  updateScoreReq,\n  resetScopeReq,\n} from './api/endpoints';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [wiki, setWiki] = useState('');\n  const [gameStarted, setGameStarted] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [user, setUser] = useState();\n  const [showLeaderBoard, setShowLeaderBoard] = useState(false);\n  const [gameLoading, setGameLoading] = useState(false);\n  const [score, setScore] = useState(0);\n  const [error, setError] = useState('');\n\n  const incrementScore = () => {\n    setScore(score => score + 1);\n  };\n\n  const toggleShowLeaderboard = () =>\n    setShowLeaderBoard(showLeaderBoard => !showLeaderBoard);\n\n  const verifyNotEmpty = input => {\n    return !!input;\n  };\n\n  const handleUsernameChange = () => {\n    if (verifyNotEmpty(name)) {\n      addUserReq({ name }).then(res => {\n        setUser(res.user);\n      });\n    }\n  };\n\n  const handleWikiChange = async () => {\n    setGameLoading(true);\n    if (verifyNotEmpty(wiki)) {\n      try {\n        const res = await createScopeReq({ title: wiki, id: user.id });\n        setError('');\n        setUser(res.user);\n        setGameStarted(true);\n      } catch (err) {\n        setError(\"This page doesn't exist\");\n        setGameStarted(false);\n      }\n    }\n    setGameLoading(false);\n  };\n\n  const handleGameOver = () => {\n    updateScoreReq({ id: user.id, scoreToAdd: score }).then(data => {\n      setUser(data.user);\n      setGameStarted(false);\n      setGameOver(true);\n    });\n  };\n\n  const restartGame = () => {\n    resetScopeReq({ id: user.id }).then(res => {\n      setUser(res?.user);\n      setGameStarted(false);\n      setGameOver(false);\n      setWiki('');\n      setScore(0);\n    });\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <Topbar setShowLeaderBoard={toggleShowLeaderboard} />\n          <Leaderboard\n            isOpen={showLeaderBoard}\n            onClose={() => setShowLeaderBoard(false)}\n          />\n\n          {user?.name ? (\n            user?.scope ? (\n              <>\n                {gameStarted && (\n                  <Game\n                    wiki={wiki}\n                    userId={user.id}\n                    handleGameOver={handleGameOver}\n                    incrementScore={incrementScore}\n                  />\n                )}\n                {gameOver && (\n                  <GameOver score={score} restartGame={restartGame} />\n                )}\n              </>\n            ) : (\n              <URLInput\n                error={error}\n                wiki={wiki}\n                setWiki={setWiki}\n                handleWiki={handleWikiChange}\n                isLoading={gameLoading}\n              />\n            )\n          ) : (\n            <NameInput\n              name={name}\n              setName={setName}\n              handleUsernameChange={handleUsernameChange}\n            />\n          )}\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}